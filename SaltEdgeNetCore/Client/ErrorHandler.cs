using System.Runtime.InteropServices;
using SaltEdgeNetCore.SaltEdgeExceptions;

namespace SaltEdgeNetCore.Client
{
    public static class ErrorHandler
    {
        public static void Handle(string errorClass, string message)
        {
            throw errorClass switch
            {
                "AccountNotFound" => new AccountNotFoundException(message),
                "ActionNotAllowed" => new ActionNotAllowedException(message),
                "AllAccountsExcluded" => new AllAccountsExcludedException(message),
                "ApiKeyNotFound" => new ApiKeyNotFoundException(message),
                "AppIdNotProvided" => new AppIdNotProvidedException(message),
                "AttemptNotFound" => new AttemptNotFoundException(message),
                "BackgroundFetchLimitExceeded" => new BackgroundFetchLimitExceededException(message),
                "BatchSizeLimitExceeded" => new BatchSizeLimitExceededException(message),
                "CategorizationLimitReached" => new CategorizationLimitReachedException(message),
                "ClientDisabled" => new ClientDisabledException(message),
                "ClientNotFound" => new ClientNotFoundException(message),
                "ClientPending" => new ClientPendingException(message),
                "ClientRestricted" => new ClientRestrictedException(message),
                "ConnectionFailed" => new ConnectionFailedException(message),
                "ConnectionLost" => new ConnectionLostException(message),
                "CountryNotFound" => new CountryNotFoundException(message),
                "CustomerNotFound" => new CustomerNotFoundException(message),
                "CustomerLocked" => new CustomerLockedException(message),
                "CredentialsNotMatch" => new CredentialsNotMatchException(message),
                "CustomFieldsSizeTooBig" => new CustomFieldsSizeTooBigException(message),
                "CustomFieldsFormatInvalid" => new CustomFieldsFormatInvalidException(message),
                "DateFormatInvalid" => new DateFormatInvalidException(message),
                "DateOutOfRange" => new DateOutOfRangeException(message),
                "DateTimeFormatInvalid" => new DateTimeFormatInvalidException(message),
                "DateTimeOutOfRange" => new DateTimeOutOfRangeException(message),
                "DuplicatedCustomer" => new DuplicatedCustomerException(message),
                "EmailInvalid" => new EmailInvalidException(message),
                "ExecutionTimeout" => new ExecutionTimeoutException(message),
                "ExpiresAtInvalid" => new ExpiresAtInvalidException(message),
                "FetchingTimeout" => new FetchingTimeoutException(message),
                "FetchScopesNotAllowed" => new FetchScopesNotAllowedException(message),
                "FetchScopesInvalid" => new FetchScopesInvalidException(message),
                "FileError" => new FileErrorException(message),
                "FileNotProvided" => new FileNotProvidedException(message),
                "FileNotSaved" => new FileNotSavedException(message),
                "HolderInfoNotSupported" => new HolderInfoNotSupportedException(message),
                "IdentifierInvalid" => new IdentifierInvalidException(message),
                "InteractiveAdapterTimeout" => new InteractiveAdapterTimeoutException(message),
                "InteractiveTimeout" => new InteractiveTimeoutException(message),
                "InternalServerError" => new InternalServerErrorException(message),
                "InvalidCredentials" => new InvalidCredentialsException(message),
                "InvalidEncoding" => new InvalidEncodingException(message),
                "InvalidFromDate" => new InvalidFromDateException(message),
                "InvalidInteractiveCredentials" => new InvalidInteractiveCredentialsException(message),
                "InvalidToDate" => new InvalidToDateException(message),
                "JsonParseError" => new JsonParseErrorException(message),
                "ConnectionAlreadyProcessing" => new ConnectionAlreadyProcessingException(message),
                "ConnectionAlreadyAuthorized" => new ConnectionAlreadyAuthorizedException(message),
                "ConnectionCannotBeRefreshed" => new ConnectionCannotBeRefreshedException(message),
                "ConnectionDisabled" => new ConnectionDisabledException(message),
                "ConnectionDuplicated" => new ConnectionDuplicatedException(message),
                "ConnectionFetchingStopped" => new ConnectionFetchingStoppedException(message),
                "ConnectionLimitReached" => new ConnectionLimitReachedException(message),
                "ConnectionNotFound" => new ConnectionNotFoundException(message),
                "MissingExpiresAt" => new MissingExpiresAtException(message),
                "MissingSignature" => new MissingSignatureException(message),
                "ProviderAccessNotGranted" => new ProviderAccessNotGrantedException(message),
                "ProviderDisabled" => new ProviderDisabledException(message),
                "ProviderError" => new ProviderErrorException(message),
                "ProviderInactive" => new ProviderInactiveException(message),
                "ProviderNotFound" => new ProviderNotFoundException(message),
                "ProviderKeyFound" => new ProviderKeyFoundException(message),
                "ProviderNotInteractive" => new ProviderNotInteractiveException(message),
                "ProviderUnavailable" => new ProviderUnavailableException(message),
                "PublicKeyNotProvided" => new PublicKeyNotProvidedException(message),
                "RateLimitExceeded" => new RateLimitExceededException(message),
                "RequestExpired" => new RequestExpiredException(message),
                "ReturnURLInvalid" => new ReturnURLInvalidException(message),
                "ReturnURLTooLong" => new ReturnURLTooLongException(message),
                "RouteNotFound" => new RouteNotFoundException(message),
                "SecretNotProvided" => new SecretNotProvidedException(message),
                "SignatureNotMatch" => new SignatureNotMatchException(message),
                "TooManyRequests" => new TooManyRequestsException(message),
                "TransactionNotFound" => new TransactionNotFoundException(message),
                "ValueOutOfRange" => new ValueOutOfRangeException(message),
                "WrongClientToken" => new WrongClientTokenException(message),
                "WrongProviderMode" => new WrongProviderModeException(message),
                "WrongRequestFormat" => new WrongRequestFormatException(message),
                "DateOutOfAispConsentRange" => new DateOutOfAispConsentRangeException(message),
                "AispConsentScopesInvalid" => new AispConsentScopesInvalidException(message),
                "AispConsentScopesNotAllowed" => new AispConsentScopesNotAllowedException(message),
                "InvalidAispConsentFromDate" => new InvalidAispConsentFromDateException(message),
                "InvalidAispConsentPeriod" => new InvalidAispConsentPeriodException(message),
                "AispConsentAlreadyRevoked" => new AispConsentAlreadyRevokedException(message),
                "AispConsentRevoked" => new AispConsentRevokedException(message),
                "AispConsentExpired" => new AispConsentExpiredException(message),
                "AispConsentNotFound" => new AispConsentNotFoundException(message),
                _ => new ExternalException("Salt Edge Error")
            };
        }
    }
}